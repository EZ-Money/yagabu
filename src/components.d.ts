/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';
import '@stencil/router';

import {
  EventEmitter,
} from '@stencil/core';

declare global {
  interface HTMLAppMarkedElement extends HTMLStencilElement {
    'doc': string;
  }
  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-marked': JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      'doc'?: string;
    }
  }
}


declare global {
  interface HTMLDemosPageElement extends HTMLStencilElement {

  }
  var HTMLDemosPageElement: {
    prototype: HTMLDemosPageElement;
    new (): HTMLDemosPageElement;
  };
  interface HTMLElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  interface ElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demos-page': JSXElements.DemosPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DemosPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLDocumentComponentElement extends HTMLStencilElement {
    'pages': string[];
  }
  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'document-component': JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      'pages'?: string[];
    }
  }
}


declare global {
  interface HTMLLandingPageElement extends HTMLStencilElement {

  }
  var HTMLLandingPageElement: {
    prototype: HTMLLandingPageElement;
    new (): HTMLLandingPageElement;
  };
  interface HTMLElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  interface ElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'landing-page': JSXElements.LandingPageAttributes;
    }
  }
  namespace JSXElements {
    export interface LandingPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLLazyIframeElement extends HTMLStencilElement {
    '_title': string;
    'frameBorder': string;
    'height': string;
    'scrolling': string;
    'src': string;
    'width': string;
  }
  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    'lazy-iframe': HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-iframe': JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      '_title'?: string;
      'frameBorder'?: string;
      'height'?: string;
      'scrolling'?: string;
      'src'?: string;
      'width'?: string;
    }
  }
}


declare global {
  interface HTMLLazyImgElement extends HTMLStencilElement {
    'alt': string;
    'src': string;
  }
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-img': JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
      'src'?: string;
    }
  }
}


declare global {
  interface HTMLMyExperienceElement extends HTMLStencilElement {

  }
  var HTMLMyExperienceElement: {
    prototype: HTMLMyExperienceElement;
    new (): HTMLMyExperienceElement;
  };
  interface HTMLElementTagNameMap {
    'my-experience': HTMLMyExperienceElement;
  }
  interface ElementTagNameMap {
    'my-experience': HTMLMyExperienceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-experience': JSXElements.MyExperienceAttributes;
    }
  }
  namespace JSXElements {
    export interface MyExperienceAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLMyHobbiesElement extends HTMLStencilElement {

  }
  var HTMLMyHobbiesElement: {
    prototype: HTMLMyHobbiesElement;
    new (): HTMLMyHobbiesElement;
  };
  interface HTMLElementTagNameMap {
    'my-hobbies': HTMLMyHobbiesElement;
  }
  interface ElementTagNameMap {
    'my-hobbies': HTMLMyHobbiesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-hobbies': JSXElements.MyHobbiesAttributes;
    }
  }
  namespace JSXElements {
    export interface MyHobbiesAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSingleHobbyElement extends HTMLStencilElement {
    'alt': string;
    'path': string;
  }
  var HTMLSingleHobbyElement: {
    prototype: HTMLSingleHobbyElement;
    new (): HTMLSingleHobbyElement;
  };
  interface HTMLElementTagNameMap {
    'single-hobby': HTMLSingleHobbyElement;
  }
  interface ElementTagNameMap {
    'single-hobby': HTMLSingleHobbyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'single-hobby': JSXElements.SingleHobbyAttributes;
    }
  }
  namespace JSXElements {
    export interface SingleHobbyAttributes extends HTMLAttributes {
      'alt'?: string;
      'path'?: string;
    }
  }
}


declare global {
  interface HTMLMainFeatureCardsElement extends HTMLStencilElement {

  }
  var HTMLMainFeatureCardsElement: {
    prototype: HTMLMainFeatureCardsElement;
    new (): HTMLMainFeatureCardsElement;
  };
  interface HTMLElementTagNameMap {
    'main-feature-cards': HTMLMainFeatureCardsElement;
  }
  interface ElementTagNameMap {
    'main-feature-cards': HTMLMainFeatureCardsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'main-feature-cards': JSXElements.MainFeatureCardsAttributes;
    }
  }
  namespace JSXElements {
    export interface MainFeatureCardsAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSingleProjectElement extends HTMLStencilElement {
    'project': any;
  }
  var HTMLSingleProjectElement: {
    prototype: HTMLSingleProjectElement;
    new (): HTMLSingleProjectElement;
  };
  interface HTMLElementTagNameMap {
    'single-project': HTMLSingleProjectElement;
  }
  interface ElementTagNameMap {
    'single-project': HTMLSingleProjectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'single-project': JSXElements.SingleProjectAttributes;
    }
  }
  namespace JSXElements {
    export interface SingleProjectAttributes extends HTMLAttributes {
      'project'?: any;
    }
  }
}


declare global {
  interface HTMLTechChipElement extends HTMLStencilElement {
    'link': any;
    'tag': any;
  }
  var HTMLTechChipElement: {
    prototype: HTMLTechChipElement;
    new (): HTMLTechChipElement;
  };
  interface HTMLElementTagNameMap {
    'tech-chip': HTMLTechChipElement;
  }
  interface ElementTagNameMap {
    'tech-chip': HTMLTechChipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tech-chip': JSXElements.TechChipAttributes;
    }
  }
  namespace JSXElements {
    export interface TechChipAttributes extends HTMLAttributes {
      'link'?: any;
      'tag'?: any;
    }
  }
}


declare global {
  interface HTMLPwasPageElement extends HTMLStencilElement {

  }
  var HTMLPwasPageElement: {
    prototype: HTMLPwasPageElement;
    new (): HTMLPwasPageElement;
  };
  interface HTMLElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
    'pwas-page': HTMLPwasPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pwas-page': JSXElements.PwasPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PwasPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLResourcesPageElement extends HTMLStencilElement {

  }
  var HTMLResourcesPageElement: {
    prototype: HTMLResourcesPageElement;
    new (): HTMLResourcesPageElement;
  };
  interface HTMLElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
    'resources-page': HTMLResourcesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'resources-page': JSXElements.ResourcesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResourcesPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSiteFooterElement extends HTMLStencilElement {

  }
  var HTMLSiteFooterElement: {
    prototype: HTMLSiteFooterElement;
    new (): HTMLSiteFooterElement;
  };
  interface HTMLElementTagNameMap {
    'site-footer': HTMLSiteFooterElement;
  }
  interface ElementTagNameMap {
    'site-footer': HTMLSiteFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-footer': JSXElements.SiteFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteFooterAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSiteHeaderElement extends HTMLStencilElement {

  }
  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSiteMenuElement extends HTMLStencilElement {

  }
  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-menu': JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLStencilSiteElement extends HTMLStencilElement {

  }
  var HTMLStencilSiteElement: {
    prototype: HTMLStencilSiteElement;
    new (): HTMLStencilSiteElement;
  };
  interface HTMLElementTagNameMap {
    'stencil-site': HTMLStencilSiteElement;
  }
  interface ElementTagNameMap {
    'stencil-site': HTMLStencilSiteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stencil-site': JSXElements.StencilSiteAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilSiteAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
